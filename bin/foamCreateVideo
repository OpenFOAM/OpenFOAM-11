#!/bin/sh
#------------------------------------------------------------------------------
# =========                 |
# \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
#  \\    /   O peration     | Website:  https://openfoam.org
#   \\  /    A nd           | Copyright (C) 2015-2023 OpenFOAM Foundation
#    \\/     M anipulation  |
#------------------------------------------------------------------------------
# License
#     This file is part of OpenFOAM.
#
#     OpenFOAM is free software: you can redistribute it and/or modify it
#     under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
#     ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
#     FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
#     for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with OpenFOAM.  If not, see <http://www.gnu.org/licenses/>.
#
# Script
#     foamCreateVideo
#
# Description
#     Creates a video file from PNG images
#     - requires ffmpeg or mencoder installed
#
#------------------------------------------------------------------------------

usage() {
    cat <<USAGE

Usage: ${0##*/} [OPTIONS] ...
options:
  -begin-pause | -b <time>  pause at beginning of the video by <time> seconds
  -dir         | -d <dir>   directory containing png images (default local dir)
  -end-pause   | -e <time>  pause at the end of the video by <time> seconds
  -fps         | -f <fps>   frames per second (default = 10)
  -help        | -h         print the usage
  -image       | -i <name>  name of image sequence (default = image)
  -out         | -o <name>  name of output video file (default = video)
  -start       | -s <frame> specify the start image
  -webm        | -w         WebM output video file format

Creates a video file from a sequence of PNG images
- A sequence named "image" will expect files image.0000.png, image.0001.png, etc
- The default output video compression format is MPEG-4, with WebM as an option
- The default file name, using MPEG-4 compression, is video.mp4
- By default the video codec is high resolution

Requires 'ffmpeg' or 'mencoder' to be installed. 'ffmpeg' is preferred since
'mencoder' does not support the '-begin-pause', '-end-pause' & '-webm' options.

USAGE
}

error() {
    exec 1>&2
    while [ "$#" -ge 1 ]
    do
        [ "$#" -eq 1 ] && printf "%s\n" "$1" || printf "%s" "$1"
        shift
    done
    usage
    exit 1
}

isInstalled () {
    command -v "$1" >/dev/null 2>&1
}

isInteger () {
    [ "$1" -eq "$1" ] 2> /dev/null
}

isNumber () {
    printf "%f" "$1" > /dev/null 2>&1 || isInteger "$1"
}

# Default settings
dir=.
image=image
video=video
fps=10
fmt=mp4
start=1
begin_pause=
end_pause=

image_list="$(mktemp /tmp/temp.XXXXXX)" || exit
echo "Creating temporary file $image_list"
trap 'rm -f "$image_list"' EXIT

# Check whether ffmpeg or mencoder are installed to create video
isInstalled ffmpeg && app="ffmpeg"
! [ "$app" ] && isInstalled mencoder && app="mencoder"
[ "$app" ] || \
    usage "Neither ffmpeg nor mencoder are installed." \
          "Install one of them to use foamCreateVideo."
echo "Running foamCreateVideo with $app"

while [ "$#" -gt 0 ]
do
   case "$1" in
   -b | -begin-pause)
      [ "$app" = "mencoder" ] && \
          error "The '$1' option is invalid when using mencoder to create " \
                "the video. Either do not use the option, or install ffmpeg."
      [ "$#" -ge 2 ] || error "The '$1' option requires an argument."
      begin_pause=$2
      isNumber "$begin_pause" || \
          error "The '$1' option requires a numeric argument."
      shift 2
      ;;
   -d | -dir)
      [ "$#" -ge 2 ] || error "The '$1' option requires an argument."
      dir=$2
      shift 2
      ;;
   -e | -end-pause)
      [ "$app" = "mencoder" ] && \
          error "The '$1' option is invalid when using mencoder to create " \
                "the video. Either do not use the option, or install ffmpeg."
      [ "$#" -ge 2 ] || error "The '$1' option requires an argument."
      end_pause=$2
      isNumber "$begin_pause" || \
          error "The '$1' option requires a numeric argument."
      shift 2
      ;;
   -f | -fps)
      [ "$#" -ge 2 ] || error "The '$1' option requires an argument."
      fps=$2
      isInteger "$fps" || \
          error "The '$1' option requires an integer argument."
      shift 2
      ;;
   -h | -help)
      usage && exit 0
      ;;
   -i | -image)
      [ "$#" -ge 2 ] || error "The '$1' option requires an argument."
      image=$2
      shift 2
      ;;
   -o | -out)
      [ "$#" -ge 2 ] || error "The '$1' option requires an argument."
      video=$2
      shift 2
      ;;
   -s | -start)
      [ "$#" -ge 2 ] || error "The '$1' option requires an argument."
      start=$2
      echo "Selected start frame, requires ffmpeg..."
      isInteger "$start" || \
          error "The '$1' option requires an integer argument."
      shift 2
      ;;
   -w | -webm)
      [ "$app" = "mencoder" ] && \
          error "The '$1' option is invalid when using mencoder to create " \
                "the video. Either do not use the option, or install ffmpeg."
      fmt=webm
      echo "Selected $fmt format, requires ffmpeg..."
      shift
      ;;
   -*)
      error "invalid option '$1'."
      ;;
   *)
      break
      ;;
    esac
done

ffmpegCreateVideo () {
    _image_list="$1"
    _fps="$2"
    _out="$3"
    _fmt="$4"

    _video_output="\
        -c:v libx264 \
        -b:v 5M \
        -r:v $_fps \
        -vf format=yuv420p,pad=ceil(iw/2)*2:ceil(ih/2)*2 \
        -flags +cgop \
        -threads 2 \
        -crf 18 \
        -bf 2 \
        -preset medium \
        -profile:v baseline \
        -shortest \
        -movflags faststart"

    [ "$_fmt" = webm ] && \
        _video_output="\
            -vf format=yuv420p,pad=ceil(iw/2)*2:ceil(ih/2)*2"

    #shellcheck disable=SC2086
    ffmpeg \
        -f concat \
        -safe 0 \
        -i "$_image_list" \
        $_video_output \
        "$_out.$_fmt"

    return 0
}

mencoderCreateVideo () {
    _image_list="$1"
    _fps="$2"
    _out="$3"
    _fmt="$4"

    mencoder \
        "mf://@$image_list" \
        -mf fps="$_fps" \
        -o "$_out.$_fmt" \
        -ovc x264

    return 0
}

#
# MAIN
#

images="$(find "$dir" -maxdepth 1 -name "$image.*.png" -type f -print0 |  \
         xargs -0 realpath | sort  | xargs -n 1)"
first_image="$(echo "$images" | sed "$start!d")"
last_image="$(echo "$images" | tail -1)"

[ -f "$first_image" ] || error "Cannot find first file in image sequence."

delay="$(awk -v f="$fps" 'BEGIN {print 1/f}')"
write=""

echo "$images" | while read -r line
do
    [ "$line" = "$first_image" ] && write=on
    [ "$write" = on ] || continue

    [ "$app" = mencoder ] && echo "$line" >> "$image_list" && continue

    # ffmpeg settings
    echo "file $line" >> "$image_list"
    [ "$line" = "$first_image" ] && \
        [ "$begin_pause" ] && \
        echo "duration $begin_pause" >> "$image_list" && continue

    [ "$line" = "$last_image" ] && \
        [ "$end_pause" ] && \
        echo "duration $end_pause" >> "$image_list" && \
        echo "file $line" >> "$image_list" && continue

    echo "duration $delay" >> "$image_list"
done

eval "$app"CreateVideo "$image_list" "$fps" "$video" "$fmt"
